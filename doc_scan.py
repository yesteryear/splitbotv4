from oauth2client.service_account import ServiceAccountCredentials
from fuzzywuzzy import process as fuzzy_process
import asyncio
import gspread


class DocScanner:
    """DocScanner is used to pull and push updates to the required doc
    
    Parameters:
    ss_URL: str - URL of the google sheet to access
    ws_name: str - Name of the worksheet (or tab) on the google sheet

    Methods:
    --------
    get_split(name: str):
        Gets the split value from the google doc for the user 
        Uses fuzzy search to allow for typos in name

    update_split(name: str, delta: int, items: str)
        Adds value of delta to user (name)'s splits. Also appends item list
        based on provided string

    confirm_user(name: str): 
        Confirms if user is in spreadsheet. Looks for EXACT search, NOT fuzzy

    add_user(name: str, splits: int, date: str, items: str):
        Adds user to spreadsheet with name, splits, date, and items
        Later 3 parameters are optional

    """

    def __init__(self, ss_URL: str, ws_name: str):
        """Initiates DocScanner class
        
        Parameters:
        -----------
        ss_url: str
            URL of the google doc
        ws_name: str
            Exact name of the specific worksheet within the google doc
        """

        # Grabs credentials and API information
        scope = [
            'https://spreadsheets.google.com/feeds', 
            'https://www.googleapis.com/auth/drive'
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', 
            scope
        )

        # Opens the document and assigns worksheet to instance variable
        gc = gspread.authorize(creds)
        self.sheet = gc.open_by_url(ss_URL).worksheet(ws_name)



    async def _fuzzy_search(self, name, splits_list=None):
        """Returns the result of a fuzzy search for the name in the doc"""

        # If splits list was not provided, generated by the sheet
        if splits_list is None:
            splits_list = await self._get_all_splits()

        # Grabs list of names from splits list for fuzzy search
        splits_names = [name[0] for name in splits_list if name[1] is not None]

        # Finds 5 closest matches to provided name above cutoff score of 90
        result = fuzzy_process.extractBests(name, splits_names, score_cutoff=90)

        # Returns best search, if no results returns None
        if len(result) == 0:
            return None
        else:
            fuzz_name = result[0][0]
            return fuzz_name


    async def _exact_search(self, name, splits_list=None):
        """Returns row of exact matching name in sheet (-1 if not found)""" 

        # Generates a list if not provided 
        if splits_list is None:
            splits_list = await self._get_all_splits()

        # Returns index of name, if not found returns -1
        for i in range(len(splits_list)):
            if (splits_list[i][0] == name) and (splits_list[i][1] is not None):
                return i
        return -1


    async def _get_name_index(self, name, splits_list=None):
        """If list is passed, searches through it. Otherwise, creates list"""

        # Generates a list if not provided         
        if splits_list is None:
            splits_list = await self._get_all_splits()

        # Returns a name match with a fuzzy search
        fuzz_name = await self._fuzzy_search(name, splits_list)

        # Returns exact index if a matching name was found
        if fuzz_name is None:
            return -1
        else:
            index = await self._exact_search(fuzz_name, splits_list)
            return index


    async def _get_all_splits(self):
        """Gets all characters and split values from spreadsheet"""

        # Grabs values from sheet
        col_name = self.sheet.col_values(1)
        col_split = self.sheet.col_values(2)

        # Creates list of tuple pairs with (name, split amount)
        # If split cannot be made proper integer, returns None for ammount
        values = []
        for i in range(len(col_name)):
            name = col_name[i]
            try:
                amount = int(col_split[i].replace(",", "").replace("$", ""))
            except (ValueError, IndexError):
                amount = None
            values.append((name, amount))
        return values


    async def _set_split(self, row, value):
        """Update split at provided row to new value"""
        self.sheet.update_cell(row, 2, value)
        return True


    async def get_split(self, name):
        """Gets individual user split amount from sheet"""

        # Generates list
        splits_list = await self._get_all_splits()
        # Grabs index based on fuzzy search match of provided name
        index = await self._get_name_index(name, splits_list)
        # If player index is found, returns split. If not found, returns None
        if index == -1:
            return None
        else:
            return splits_list[index][1], splits_list[index][0]


    async def update_split(self, name, delta, items=None):
        """Adds value of delta to name's split"""

        # Generates list
        splits_list = await self._get_all_splits()

        # Gets index of name based on fuzzy search match
        index = await self._get_name_index(name, splits_list)

        # If index is valid, adds provided value to splits
        if index == -1:
            return None
        prev_val = int(splits_list[index][1])
        new_val = prev_val + delta
        await self._set_split(index + 1, new_val)

        # If item provided, appends item to end of item list
        if items is not None:
            item_list = self.sheet.cell(index + 1, 3).value
            if len(item_list) != 0:
                new_item_list = item_list + ", " + items
            else: 
                new_item_list = items
            self.sheet.update_cell(index + 1, 3, new_item_list)

        # Returns both previous and new value
        return prev_val, new_val, splits_list[index][0] 


    async def confirm_user(self, name, splits_list=None):
        """Confirms if user exists, uses EXACT search"""

        # Generates a list if not provided   
        if splits_list is None:
            splits_list = await self._get_all_splits()

        # Returns True if name exists, False if name does not
        index = await self._exact_search(name, splits_list)
        return index != -1


    async def add_user(self, name, splits=0, date=None, items=''):
        """Adds user with optional splits, date, and items list"""

        # Confirm if user exists
        if await self.confirm_user(name):
            return False  # Indicates user exists

        # If user does not exist, add to bottom with split

        # Gets row for the end of the list
        col_list = self.sheet.col_values(1)
        row = len(col_list) + 1

        # Updates names, splits and items based on provided values
        self.sheet.update_cell(row, 1, name)
        self.sheet.update_cell(row, 2, splits)
        self.sheet.update_cell(row, 3, items)

        # If date is not provided, uses the existing cell value TODAY()
        # Replaces the function in the cell with the value
        if date is None:
            date = self.sheet.cell(row, 4).value
        self.sheet.update_cell(row, 4, date)

        # Confirms user was added
        return True  



# The error code is gspread.exceptions.APIError
if __name__ == "__main__":
    test = DocScanner("https://docs.google.com/spreadsheets/d/1Py0pico9VWu0Nno0nuVFl6kBwZrkmxM8rqlSMWtuGbo/edit#gid=176933786", "test")


